/*
运算符&可以用于声明和定义应用类型，变量、函数参数和返回值都可以是引用类型。
只读引用变量用于引用常量／只读变量。引用（普通／只读）对象、常量都必须立即初始化。
左／右值表达式是能够出现在等号左／右边的表达式。
变量就是最简单的左值表达式。常量就是最简单的右值表达式。
左值一定是右值、右值不一定是左值。
引用变量如果还不能初始化，则编译程序会临时产生一个类型相符的匿名变量，用表达式的值初始化匿名变量，然后以匿名变量初始化引用变量。
引用参数类似引用变量，只不过初始化在调用函数的时候完成。
指针和引用在编译的时候的实现都是一个对象的指针，效率上没有差别。
只是引用用起来比较自然，尤其是运算符重载时，f(T & a) cin<<a 而不是 f(T * a) cin <<(*a)
*/

void swap(int * x,int * y)
{
    int t=*x;
    *x = * y;
    *y=t;
}
void swap(int &x,int&y){
    int t=x;
    x=y;
    y=t;
}
/*
使用引用作为函数参数和返回值可以减少栈的用量。
普通引用参数可以返回执行结果，可以被修改。调用时必须用左值表达式初始化。
只读引用参数不可以待会执行结果，不能被修改。调用时必须用右值表达式初始化。
*/