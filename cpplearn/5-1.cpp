// 静态成员
// 静态数据成员
// 包括 静态数据成员和静态函数成员
// 静态数据成员用于描述类的总体信息 必须在类的体外定义和初始化 union类不允许定义静态数据成员
// 类的总体信息包括类的对象总数等
// 如下代码所示 使用static声明静态成员

class A{
    int a;
    A * next;
    static A * head;// 声明静态数据成员
    public:
    A(int b);
    ~A();
};

A * A::head = 0 ; // 定义并初始化静态数据成员
// 这个静态数据成员由所有的这个类共享

A::A(int b){
    a=b;
    next=head;
    head=this;
}

A::~A(){
    A * p =head;
    if(p==this){
        head = this->next;
    }
    else{
        while(p->next!=this){
            p=p->next;
        }
        p->next=this->next;
    }
}
// 访问静态数据成员有三种方式1A::head 2a.A::head 3a.head
// 这说明静态数据对象可以脱离具体对象独立存在 他在还没有任何对象的时候就初始化了
// 他的存储单元不是任何对象的一部分 
// 因为对象的存储空间只由普通数据成员的存储单元构成 所以计算对象或类的空间时不算静态数据成员
// 实际上静态数据成员相当于一个有访问权限的普通全局变量。
// 局部类中不可以定义静态数据成员
// 静态数据成员作用于所有程序文件
// 从而不能出现在类中声明了static int a 然后又在全局声明 static int a  将他限定在文件中
